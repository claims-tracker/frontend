/**
 * Generated by @openapi-codegen
 *
 * @version v1
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type EntityGetQueryParams = {
  /**
   * @maximum 100
   * @minimum 1
   * @format int32
   */
  count?: number;
  /**
   * @maximum 2147483647
   * @minimum 1
   * @format int32
   */
  page?: number;
  sort?: Schemas.EntityPropertyNameEnumSortWebDTO[];
  filter?: Schemas.EntityPropertyNameEnumFilterWebDTO[];
};

export type EntityGetError = Fetcher.ErrorWrapper<undefined>;

export type EntityGetVariables = {
  queryParams?: EntityGetQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchEntityGet = (
  variables: EntityGetVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.GetEntitiesWebResponseDTO,
    EntityGetError,
    undefined,
    {},
    EntityGetQueryParams,
    {}
  >({ url: "/api/entity", method: "get", ...variables, signal });

export const useEntityGet = <TData = Schemas.GetEntitiesWebResponseDTO>(
  variables: EntityGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GetEntitiesWebResponseDTO,
      EntityGetError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.GetEntitiesWebResponseDTO,
    EntityGetError,
    TData
  >(
    queryKeyFn({ path: "/api/entity", operationId: "entityGet", variables }),
    ({ signal }) => fetchEntityGet({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type QueryOperation = {
  path: "/api/entity";
  operationId: "entityGet";
  variables: EntityGetVariables;
};
